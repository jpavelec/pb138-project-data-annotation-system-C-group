<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
        "http://docbook.org/xml/4.5/docbookx.dtd">

<article lang="cs">
    <title>Závěrečná zpráva projektu Annotation system - skupina C</title>
    <author>
        <firstname>Ondřej</firstname>
        <surname>Velíšek</surname>
    </author>
    <sect1>
        <title>Úvod</title>
        <para>
            Naším úkolem bylo vytvořit systém pro anotování
            dat pro účely strojového zpracování. Do systému správce
            nahraje soubor s seznamem slov. Ten může rozdělit
            a přiřadit k anotování ostatním uživatelům systému.
            Uživatel pak otázky ohodnocuje (anotuje) příznakem
            "správně" nebo "nesprávně" v závislosti na zadané
            otázce pro seznam. Výstupem systému jsou oanotovaná
            data a statistiky o hodnocení uživatelů.

            Práci jsme si rozdělili rovnoměrně mezi backend a frontend.
            Přičemž já jsem pracoval s Josefem na backendu
            a Kristýna s Matějem na frontendu.
            Tento dokument shrnuje moji práci na projektu.
        </para>
    </sect1>
    <sect1>
        <title>Vytvoření struktury</title>
        <para>
            Nejdříve jsem vytvořil základní kostru projektu.
            Závislosti projektu jsou spravovány nástrojem Maven.
            Kdokoliv kdo bude chtít na projektu spolupracovat
            se díky tomu nemusí starat o závislosti na knihovnách,
            které využíváme. Maven mu je standardně obstará.

            Projekt jsem rozdělil na dva balíky, frontend a backend,
            přičemž frontend je závislý na backendu.
            Díky tomu může být v budoucnu vytvořen nový balík,
            který bude závislý jen na backendu. Například RPC rozraní,
            které bude využíváno moderním ajax klientem.

            Závislosti v Mavenu jsou konfigurvány pomocí XML souboru pom.xml
            v kořenovém adresáři. Jde o stadardní XML soubor jehož schéma
            je specifikováno <ulink url="http://maven.apache.org/xsd/maven-4.0.0.xsd">
            http://maven.apache.org/xsd/maven-4.0.0.xsd</ulink>. Do této
            konfigurace každý člen týmu přidával závislosti na knihovnách,
            které potřeboval.

            Vnitřní závislosti mezi komponentami v projektu, jsou spravovány Spring frameworkem.
            Resp. jeho komponentou IoC (inversion of control), která pracuje
            na principu dependency injection. Dále Spring využíváme
            ke správě transakcí a k MVC architektuře na frontendu.
            Nastavení jsem napsal pomocí java konfiguraci. Protože IDE
            se v java konfigurací dokáže lépe navigovat a dokáže ji
            jednodušeji refaktorovat. Také se jednodušeji rozděluje.
        </para>
    </sect1>
    <sect1>
        <title>Modelování</title>
        <para>
            Společně s Josefem Pavelcem jsme navrhli model problému.
            Objekt Pack obsahuje repetitivní faktor
            a faktor šumu. Subpack obsahuje odkaz na svého rodiče (Pack).
            Odpověď reprezentuje třída Answer, která nese odkaz na Subpack, ze kterého pochází.
            Dále příznak zda je šumová nebo obyčejná a samotný řetězec s odpovědí.
            Uživatel reprezentovaný třídou Person může Answery hodnotit. Tento vztah je definován
            vazební třídou Evaluation, která obsahuje hodnocení "správně" nebo "nesprávně",
            referenci na odpověď a uživatele, který ji ohodnotil.
        </para>
    </sect1>
    <sect1>
        <title>Business vrstva</title>
        <para>
            Backend je rodělen na dvě vrstvy, business a dao.
            Každá vrstva definuje rozhraní, které nabízí, a tím
            zajišťuje testovatelnost, udržovatelnost systému.
            Já jsem měl na starost business vrstvu. K ní
            jsem ještě před implementací navrhnul rozhraní a napsal
            přes 100 testů a tím ho dostatečně specifikoval.
            Všechny metody si striktně validují svá vstupní data.
            To vše přispívá ke stabilitě a robustnosti systému.

            Business vrstva využívá dao vrstvu
            k manipulaci s persistentními daty. Naopak nabízí funcionalitu
            pomocí definovaného API. Hlavní funkcionalitu jsme navrhli tak,
            že vytvoření balíku zajistí jedna funkce, která se postará
            o rozdělení otázek do podbalíků a vygenerování opakujících se otázek
            a šumových otázek. Poté správce zavolá metodu pro přiřazení
            podbalíků uživatelům. A končně může uživatel, který má přidělený
            podbalík otázek začít s jejich ohodnocováním. K tomu má opět
            nachystanou metodu, která z daného balíku náhodně vybere
            neohodnocenou otázku včetně repetitivních a šumových otázek.

            Konečným výstupem jsou statistiky o ohodnocení.
            Například jak velká část balíku je ohodnocena,
            průměrný čás hodnocení otázky. Nebo kvalita hodnocení
            uživatele pomocí cohen kappa indexu, který porovnává odpovědi
            šumu a repetitivních otázek. Každý tato statistika je přístupná
            pomocí metody v business API.
        </para>
    </sect1>
</article>